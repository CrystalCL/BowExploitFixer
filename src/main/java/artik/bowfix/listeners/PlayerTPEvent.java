package artik.bowfix.listeners;

import artik.bowfix.BowFix;
import artik.bowfix.utils.BaseUtils;
import artik.bowfix.utils.PlayerUtils;
import org.bukkit.Bukkit;
import org.bukkit.entity.*;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerTeleportEvent;

public class PlayerTPEvent implements Listener
{
    private BaseUtils db;
    
    public PlayerTPEvent()
    {
        try
        {
            db = new BaseUtils();
        }
        catch(Exception e)
        {
            e.printStackTrace();
            if (BowFix.instance != null) Bukkit.getPluginManager().disablePlugin(BowFix.instance);
        }
    }
    
    
    @EventHandler
    public void onTeleport(PlayerTeleportEvent e)
    {
    	if(!PlayerUtils.isShoot(e.getPlayer()) || !PlayerUtils.isDrawing(e.getPlayer())) return;
     String name = e.getPlayer().getName();
    		if(PlayerUtils.isShoot(e.getPlayer()) || PlayerUtils.isDrawing(e.getPlayer())) {
    	        String message = BowFix.instance.getConfig().getString("messages.events.warn");
                if (message != null) e.getPlayer().sendMessage(message.replace("&","ยง"));
            db.add(e.getPlayer().getName());
            
            if(db.count(e.getPlayer().getName()) >= 2)
            {
                 String message2 = BowFix.instance.getConfig().getString("messages.events.kicked");
                 if (message2 == null) throw new IllegalStateException();
                e.getPlayer().kickPlayer(message2.replace("&","ยง"));
                 BowFix.LOG.warning("[PROTECTION] " + name + " was kicked by using BowExploit!");
                
                db.remove(e.getPlayer().getName());
            }
        }
    }
    
    @EventHandler
    public void onAccess(PlayerJoinEvent e)
    {
        PlayerUtils.restrictAccess(e.getPlayer());
    }
    
    @EventHandler
    public void onArrowSpawn(EntitySpawnEvent e)
    {
        if (e.getEntityType() != EntityType.ARROW && e.getEntityType() != EntityType.SPECTRAL_ARROW) return;
    
        AbstractArrow arrow = (AbstractArrow) e.getEntity();
        
        if (arrow.getVelocity().lengthSquared() > PlayerUtils.isSqr(3.7))
        {
            arrow.remove();
         
            return;
        }
        
        arrow.setCritical(false);
    }
    
}
