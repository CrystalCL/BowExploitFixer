package artik.bowfix.listeners;

import artik.bowfix.BowFix;
import artik.bowfix.utils.PlayerUtils;
import org.bukkit.Material;
import org.bukkit.entity.AbstractArrow;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.entity.EntityShootBowEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerItemHeldEvent;
import org.bukkit.event.player.PlayerKickEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class ItemUseEvent implements Listener
{
    private static final Map<String, Boolean> drawing = new ConcurrentHashMap<>();
    private static final Map<String, Boolean> bowing = new ConcurrentHashMap<>();
    private static final Map<String, Boolean> shooters = new ConcurrentHashMap<>();
    
    @EventHandler
    public void onDraw(PlayerInteractEvent e)
    {
        if(e.getItem() != null && e.getItem().getType() == Material.BOW)
        {
            if(e.getAction() == Action.RIGHT_CLICK_AIR || e.getAction() == Action.RIGHT_CLICK_BLOCK)
                drawing.put(PlayerUtils.getName(e.getPlayer()), true);
        }
    }
    
    @EventHandler
    public void onBow(PlayerInteractEvent e)
    {
        if(e.getItem() != null && e.getItem().getType() == Material.BOW)
        {
            bowing.put(PlayerUtils.getName(e.getPlayer()), true);
        }
    }
    
    @EventHandler
    public void onShoot(EntityShootBowEvent e)
    {
        if(e.getEntity() instanceof Player)
        {
            Player shooter = (Player) e.getEntity();
    
            drawing.put(PlayerUtils.getName(shooter), false);
    
            Entity projectile = e.getProjectile();
            if (projectile instanceof AbstractArrow)
            {
                AbstractArrow arrow = (AbstractArrow) projectile;
    
                double arrow_speed_sqr = arrow.getVelocity().lengthSquared();
                
                if (arrow_speed_sqr > PlayerUtils.getSqr(3.7))
                {
                    if (arrow_speed_sqr > PlayerUtils.getSqr(6.0))
                    {
                        String message2 = BowFix.instance.getConfig().getString("messages.events.kicked");
                        if (message2 == null) throw new IllegalStateException();
                        shooter.kickPlayer(message2.replace("&","ยง"));
                        BowFix.LOG.warning("[PROTECTION] " + shooter.getName() + " was kicked by using BowExploit!");
                    }
                    
                    arrow.remove();
                    e.setCancelled(true);
                }
                else arrow.setCritical(false);
            }
            
            shooters.put(PlayerUtils.getName(shooter), true);
        }
    }
    
    @EventHandler
    public void onDisconnected(PlayerQuitEvent e)
    {
        drawing.put(PlayerUtils.getName(e.getPlayer()), false);
    }
    
    @EventHandler
    public void onDisconnected(PlayerKickEvent e)
    {
        drawing.put(PlayerUtils.getName(e.getPlayer()), false);
    }
    
    @EventHandler
    public void onChangeSlot(PlayerItemHeldEvent e)
    {
        drawing.put(PlayerUtils.getName(e.getPlayer()), false);
    }
    
    public static boolean isDrawing(Player player)
    {
        return drawing.getOrDefault(PlayerUtils.getName(player), false);
    }
    
    public static double getSquare(double x)
    {
        return x * x;
    }
    
    public static boolean isBowing(Player player)
    {
        return bowing.getOrDefault(PlayerUtils.getName(player), false);
    }
    public static boolean isShoot(Player player)
    {
        return shooters.getOrDefault(PlayerUtils.getName(player), false);
    }
}
