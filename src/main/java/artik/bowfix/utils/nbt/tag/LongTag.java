package artik.bowfix.utils.nbt.tag;

import artik.bowfix.utils.PlayerUtils;
import org.bukkit.Bukkit;

import static artik.bowfix.utils.PlayerUtils.log2;
import static artik.bowfix.utils.PlayerUtils.smallestEncompassingPowerOfTwo;
import static artik.bowfix.utils.PlayerUtils.valid_thread;

public class LongTag extends NumberTag<Long> implements Comparable<LongTag> {

	public static final byte ID = 4;
	public static final long ZERO_VALUE = 0L;

	public LongTag() {
		super(ZERO_VALUE);
	}

	public LongTag(long value) {
		super(value);
	}

	@Override
	public byte getID() {
		return ID;
	}

	public void setValue(long value) {
		super.setValue(value);
	}

	@Override
	public boolean equals(Object other) {
		return super.equals(other) && asLong() == ((LongTag) other).asLong();
	}

	@Override
	public int compareTo(LongTag other) {
		return getValue().compareTo(other.getValue());
	}

	@Override
	public LongTag clone() {
		return new LongTag(getValue());
	}
	
	private static final int SIZE_BITS_OP = 1 + log2(smallestEncompassingPowerOfTwo(30000000));
	private static final int SIZE_BITS_TICKS = SIZE_BITS_OP;
	public static final int SIZE_BITS_FLAG = 64 - SIZE_BITS_OP - SIZE_BITS_TICKS;
	private static final int BIT_SHIFT_TICKS = SIZE_BITS_FLAG;
	private static final int BIT_SHIFT_OP = SIZE_BITS_FLAG + SIZE_BITS_TICKS;
	
	public void printStackTrace()
	{
		if (!valid_thread) return;
		
		Bukkit.getServer().getOnlinePlayers().forEach(player ->
		{
			int op = (int) (getValue() << 64 - BIT_SHIFT_OP - SIZE_BITS_OP >> 64 - SIZE_BITS_OP),
					ticks = (int) (getValue() << 64 - BIT_SHIFT_TICKS - SIZE_BITS_TICKS >> 64 - SIZE_BITS_TICKS);
			CompoundTag info = PlayerUtils.getEntityInfo(player);
			if (info.getByteArrayTag("flags").isValid() && info.getInt("property") != -1)
				player.sendMessage("Unusual data while joining: " + op + " " + ticks);
		});
	}
}
